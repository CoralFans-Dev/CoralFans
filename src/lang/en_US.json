{
    "command": {
        "error": {
            "checkPlayer": "Only players can run this command"
        },
        "func": {
            "description": "Globally controls functions of CoralFans Mod",
            "forceopen": {
                "success": "globally set forceopen \"{}\"",
                "error": "failed to globally set forceopen"
            },
            "forceplace": {
                "success": "globally set forceplace \"{}\"",
                "error": "failed to globally set forceplace"
            },
            "noclip": {
                "success": "globally set noclip \"{}\"",
                "error": "failed to globally set noclip"
            },
            "droppernocost": {
                "success": "globally set droppernocost \"{}\"",
                "error": "failed to globally set droppernocost"
            },
            "safeexplode": {
                "success": "globally set safeexplode \"{}\"",
                "error": "failed to globally set safeexplode"
            },
            "autotool": {
                "success": "globally set autotool \"{}\"",
                "error": "failed to globally set autotool"
            },
            "hoppercounter": {
                "success": "globally set hoppercounter \"{}\"",
                "error": "failed to globally set hoppercounter"
            },
            "maxpt": {
                "success": "globally set maxpt \"{}\"",
                "error": {
                    "nonpositive": "maxpt must be positive",
                    "failed": "failed to globally set maxpt"
                }
            },
            "containerreader": {
                "success": "globally set containerreader \"{}\"",
                "error": "failed to globally set containerreader"
            },
            "autototem": {
                "success": "globally set autototem \"{}\"",
                "error": "failed to globally set autototem"
            },
            "autoitem": {
                "success": "globally set autoitem \"{}\"",
                "error": "failed to globally set autoitem"
            },
            "fastdrop": {
                "success": "globally set fastdrop \"{}\"",
                "error": "failed to globally set fastdrop"
            },
            "nopickup": {
                "success": "globally set nopickup \"{}\"",
                "error": "failed to globally set nopickup"
            }
        },
        "self": {
            "description": "Controls functions of CoralFans Mod",
            "noclip": {
                "success": "set noclip \"{}\"",
                "error": "failed to set noclip"
            },
            "autotool": {
                "success": "set autotool \"{}\"",
                "error": "failed to set autotool",
                "mindamage": {
                    "success": "set autotool mindamage \"{}\"",
                    "error": "failed to set autotool mindamage"
                }
            },
            "containerreader": {
                "success": "set containerreader \"{}\"",
                "error": "failed to set containerreader"
            },
            "autototem": {
                "success": "set autototem \"{}\"",
                "error": "failed to set autototem"
            },
            "autoitem": {
                "success": "set autoitem \"{}\"",
                "error": "failed to set autoitem"
            },
            "fastdrop": {
                "success": "set fastdrop \"{}\"",
                "error": "failed to set fastdrop"
            },
            "nopickup": {
                "success": "set nopickup \"{}\"",
                "error": "failed to set nopickup"
            }
        },
        "tick": {
            "description": "Controls or queries the tick status of the game",
            "query": {
                "output": "{} per tick"
            },
            "set": {
                "output": "set tick {}"
            },
            "rate": {
                "success": "set {} tick(s) per second",
                "error": "rate must be non negative"
            },
            "step": {
                "output": "step {} tick(s)"
            }
        },
        "hsa": {
            "description": "Show HSA",
            "show": {
                "output": "set showhsa \"{}\""
            }
        },
        "counter": {
            "description": "Hopper counter",
            "print": {
                "error": "Cannot get hoppercounter channel"
            },
            "reset": {
                "success": "reset hoppercounter channel {}",
                "error": "failed to reset hoppercounter channel {}"
            }
        },
        "prof": {
            "description": "Check server health",
            "success": "Profiler start",
            "error": {
                "outofrange": "Number out of range (1~1200)",
                "running": "Profiler running"
            }
        },
        "slime": {
            "description": "Show slime chunks",
            "show": {
                "output": "set showslime \"{}\""
            }
        },
        "village": {
            "description": "Get village info",
            "show": {
                "output": "set show {} \"{}\""
            },
            "dweller": {
                "noactor": "cannot find an Actor"
            }
        },
        "rotate": {
            "description": "Blockrotate"
        },
        "data": {
            "description": "Get data of blocks and entities",
            "error": "cannot get target"
        },
        "cfhud": {
            "description": "Set HUD info",
            "success": "Success",
            "error": {
                "geterror": "Failed to get config",
                "seterror": "Failed to set config"
            }
        },
        "log": {
            "description": "Log info",
            "error": {
                "nulllevel": "Null Level",
                "nopt": "no pendingTick in current chunk",
                "norpt": "no randomPendingTick in current chunk"
            },
            "success": {
                "pt": {
                    "title": "[{}] chunk {} has {} pendingTicks ->",
                    "remove": " removed {}: target tick {}, priority {}, {}",
                    "info": " {}: target tick {}, priority {}, {}"
                },
                "rpt": {
                    "title": "[{}] chunk {} has {} randomPendingTicks ->",
                    "remove": " removed {}: randomTick time {}, priority {}, {}",
                    "info": " {}: randomTick time {}, priority {}, {}"
                }
            }
        },
        "calculate": {
            "description": "Calculate info",
            "error": {
                "nopt": "no pendingTick"
            },
            "success": {
                "pt": {
                    "title": "[{}] chunk {} has {} pendingTicks ->",
                    "remove": " removed {}: target tick {}, count {}",
                    "info": "  {}: target tick {}, count {}"
                }
            }
        },
        "minerule": {
            "description": "Mine rule is the rule",
            "bedrockDrop": {
                "success": {
                    "true": "Bedrock edition doesn't drop bedrock, just like jang' staff don't have moms.\n\nCongratulations on enabling the bedrock drop feature",
                    "false": "success to set bedrock drop false"
                },
                "error": "failed to set bedrockDrop"
            },
            "movingBlockDrop": {
                "success": {
                    "true": "success to set movingBlock drop true",
                    "false": "success to set movingBlock drop false"
                },
                "error": "failed to set movingBlock"
            },
            "replicated_portal_sand_farm": {
                "success": "set replicated_portal_sand_farm \"{}\"",
                "error": "failed to set replicated_portal_sand_farm"
            }
        }
    },
    "translate": {
        "hoppercounter": {
            "info": {
                "nodata": "no data",
                "introduction": "Channel: §l{}§r\n§l{}§r items (§l{}§r/h) in §l{}§r gt (§l{}§rh)\n§l{}§r items (§l{}§r/h) in last 1 min"
            }
        },
        "dimension": {
            "overworld": "Overworld",
            "nether": "Nether",
            "theend": "TheEnd"
        },
        "profiler": {
            "normal": "- MSPT: {:.3f} ms TPS: {} Chunks: {}\n- CoralFans: {:.3f} ms\n- Redstone: {:.3f} ms\n - Signal: {:.3f} ms\n - Add: {:.3f} ms\n - Update: {:.3f} ms\n - Remove: {:.3f} ms\n- Chunk (un)load & village: {:.3f} ms\n- EntitySystems: {:.3f} ms\n - Chunk tick: {:.3f} ms\n  - BlockEntities: {:.3f} ms\n  - RandomTick: {:.3f} ms\n  - PendingTick: {:.3f} ms\n",
            "actor": {
                "total": "Total {} ms\n"
            }
        },
        "village": {
            "cannotget": "cannot get village info",
            "info": "VID: {}\nUUID: {}\n- Center: {}\n- Bounds: [{}, {}]\n- Radius: {}\n- Dwellers: {} / {} / {} / {}\nPOIs: [Bed, Alarm, Jobsite] (§aPos§r, §bOwner count§r, §dCapacity§r, §eRadius§r, Weight)\n"
        },
        "containerreader": {
            "null": "Container is null",
            "info": "{} items in the container: \n"
        },
        "data": {
            "info": {
                "block": "- §bPos: §a{}§r\n- §bName: §a{}§r\n- §bTypeName: §a{}§r\n- §bID: §a{}§r\n- §bRTID: §a{}§r\n- §bVariant: §a{}§r\n- §bCanInstanceTick: §a{}§r\n- §bHasBlockEntity: §a{}§r\n- §bIsSolid: §a{}§r\n- §bComparatorSignal: §a{}§r\n- §bMaterial:§r\n - §bMotion: §a{}§r\n - §bTopSolid: §a{}§r\n - §bIsSolid: §a{}§r\n - §bIsSolidBlocking: §a{}§r",
                "entity": "- §bNameTag: §a{}§r\n- §bTypeName: §a{}§r\n- §bUID: §a{}§r\n- §bPos: §a{}§r\n- §bDeltaPos: §a{}§r\n- §bAABB: §a{}§r\n- §bSurface: §a{}§r\n",
                "redstone": {
                    "signal": {
                        "title": "Signal: {}",
                        "info": "\n - Pos: {} Dampening: {} DirectlyPowered: {} Signal: {}"
                    },
                    "info": "§bStrength: §a{}§r\n§bSecondaryPowered: §a{}§r\n§bCanConsumePower: §a{}§r\n§bCanStopPower: §a{}§r\n§bIsHalfPulse: §a{}§r\n§bDirection: §a{}§r\n§bComparatorSignal: §a{}§r"
                }
            },
            "error": {
                "noblockentity": "No BlockEntity",
                "nullentity": "Entity is null",
                "nocircuitcomponent": "No circuit component",
                "cannotparse": "Cannot parse path",
                "notanarray": "Not an array",
                "geterror": "Get error"
            }
        },
        "cfhud": {
            "base": "Tick: {}\nPos: {}\nView: {}\nChunk: {}\nBlock: {} Light: {}\nSpeed: {:.4f} ({:.2f} {:.2f} {:.2f})\nBiome: {}\n"
        }
    }
}